name: Deploy Website

on:
  push:
    branches:
      - master
      - develop

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.terraform-output.outputs.bucket_name }}
      cloudfront_distribution_id: ${{ steps.terraform-output.outputs.cloudfront_distribution_id }}
      cloudfront_domain: ${{ steps.terraform-output.outputs.cloudfront_domain }}
      dev_path_uuid: ${{ steps.terraform-output.outputs.dev_path_uuid }}
      website_url: ${{ steps.terraform-output.outputs.website_url }}
      custom_domains: ${{ steps.terraform-output.outputs.custom_domains }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -input=false \
            -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"

      - name: Terraform Output
        id: terraform-output
        run: |
          cd terraform
          BUCKET_NAME=$(terraform output -raw website_bucket_name)
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
          CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_distribution_domain)
          DEV_PATH_UUID=$(terraform output -raw dev_path_uuid)
          WEBSITE_URL=$(terraform output -raw website_url_cloudfront_domain)
          CUSTOM_DOMAINS=$(terraform output -json custom_domains)

          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "cloudfront_domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_OUTPUT
          echo "dev_path_uuid=$DEV_PATH_UUID" >> $GITHUB_OUTPUT
          echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "custom_domains=$CUSTOM_DOMAINS" >> $GITHUB_OUTPUT

      - name: Show Terraform Outputs
        run: |
          echo "Bucket: ${{ steps.terraform-output.outputs.bucket_name }}"
          echo "CloudFront ID: ${{ steps.terraform-output.outputs.cloudfront_distribution_id }}"
          echo "CloudFront Domain: ${{ steps.terraform-output.outputs.cloudfront_domain }}"
          echo "Dev Path UUID: ${{ steps.terraform-output.outputs.dev_path_uuid }}"
          echo "Website URL: ${{ steps.terraform-output.outputs.website_url }}"
          echo "Custom Domains: ${{ steps.terraform-output.outputs.custom_domains }}"

  build-and-deploy:
    name: Build and Deploy
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          REACT_APP_GOOGLE_CALENDAR_API_KEY: ${{ secrets.GOOGLE_CALENDAR_API_KEY }}
          REACT_APP_GOOGLE_CALENDAR_ID: ${{ secrets.GOOGLE_CALENDAR_ID }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Production deploy (master): sync to bucket root and invalidate everything.
      - name: Deploy to S3 (Master Branch)
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Deploying to production bucket root..."
          aws s3 sync build/ s3://${{ needs.terraform.outputs.bucket_name }}/ --delete --exact-timestamps
          echo "Prod URL: https://${{ needs.terraform.outputs.cloudfront_domain }}/"

      - name: Invalidate CloudFront Cache (Master Branch)
        if: github.ref == 'refs/heads/master'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_distribution_id }} \
            --paths "/*"

      # Development deploy (develop): sync ONLY to <uuid>/dev/ prefix.
      - name: Prepare Dev Prefix (Develop Branch)
        if: github.ref == 'refs/heads/develop'
        run: |
          if [ -z "${{ needs.terraform.outputs.dev_path_uuid }}" ]; then
            echo "Missing dev_path_uuid from Terraform outputs."
            exit 1
          fi
          echo "Using dev UUID: ${{ needs.terraform.outputs.dev_path_uuid }}"
          # Optional: create a zero-byte key for folder marker (not strictly required)
          aws s3api put-object --bucket "${{ needs.terraform.outputs.bucket_name }}" --key "${{ needs.terraform.outputs.dev_path_uuid }}/dev/" >/dev/null

      - name: Deploy to S3 (Develop Branch)
        if: github.ref == 'refs/heads/develop'
        run: |
          PREFIX="${{ needs.terraform.outputs.dev_path_uuid }}/dev/"
          echo "Deploying to dev prefix: s3://${{ needs.terraform.outputs.bucket_name }}/${PREFIX}"
          aws s3 sync build/ "s3://${{ needs.terraform.outputs.bucket_name }}/${PREFIX}" --delete --exact-timestamps

          echo "Dev Preview URL:"
          echo "https://${{ needs.terraform.outputs.cloudfront_domain }}/${{ needs.terraform.outputs.dev_path_uuid }}/dev/"

      - name: Invalidate CloudFront Cache (Develop Branch)
        if: github.ref == 'refs/heads/develop'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.cloudfront_distribution_id }} \
            --paths "/${{ needs.terraform.outputs.dev_path_uuid }}/dev/*"

      - name: Post Deploy Summary (Develop)
        if: github.ref == 'refs/heads/develop'
        shell: bash
        run: |
          # Ensure jq is available (usually preinstalled on ubuntu-latest)
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }

          RAW_CUSTOM='${{ needs.terraform.outputs.custom_domains }}'
          PRIMARY_DOMAIN=$(echo "$RAW_CUSTOM" | jq -r '.[0] // empty')

          # Fallback to CloudFront domain when no custom domain is configured
          if [[ -z "$PRIMARY_DOMAIN" || "$PRIMARY_DOMAIN" == "null" ]]; then
            PRIMARY_DOMAIN='${{ needs.terraform.outputs.cloudfront_domain }}'
          fi

          DEV_UUID='${{ needs.terraform.outputs.dev_path_uuid }}'
          BASE_URL="https://${PRIMARY_DOMAIN}/${DEV_UUID}/dev"

          echo "::notice title=Dev Preview URL::${BASE_URL}/"
          echo "::notice title=Dev Index URL::${BASE_URL}/index.html"

          {
            echo "## ðŸš€ Develop Deployment"
            echo ""
            echo "**Bucket**: \`${{ needs.terraform.outputs.bucket_name }}\`"
            echo "**Prefix**: \`${DEV_UUID}/dev/\`"
            echo ""
            echo "**Preview Root:** ${BASE_URL}/"
            echo "**Index:** ${BASE_URL}/index.html"
            echo ""
            echo "> CloudFront Distribution: \`${{ needs.terraform.outputs.cloudfront_distribution_id }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Post Deploy Summary (Master)
        if: github.ref == 'refs/heads/master'
        shell: bash
        run: |
          # Ensure jq is available (usually preinstalled on ubuntu-latest)
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }

          RAW_CUSTOM='${{ needs.terraform.outputs.custom_domains }}'
          PRIMARY_DOMAIN=$(echo "$RAW_CUSTOM" | jq -r '.[0] // empty')

          # Fallback to CloudFront domain when no custom domain is configured
          if [[ -z "$PRIMARY_DOMAIN" || "$PRIMARY_DOMAIN" == "null" ]]; then
            PRIMARY_DOMAIN='${{ needs.terraform.outputs.cloudfront_domain }}'
          fi

          PROD_URL="https://${PRIMARY_DOMAIN}/"

          echo "::notice title=Production URL::${PROD_URL}"

          {
            echo "## âœ… Production Deployment"
            echo ""
            echo "**Bucket**: \`${{ needs.terraform.outputs.bucket_name }}\`"
            echo "**Root:** ${PROD_URL}"
            echo ""
            echo "> CloudFront Distribution: \`${{ needs.terraform.outputs.cloudfront_distribution_id }}\`"
          } >> "$GITHUB_STEP_SUMMARY"
